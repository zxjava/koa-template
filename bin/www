#!/usr/bin/env node
const path = require('path')
global._require = (moduleName) => {
  return moduleName.slice(0, 1) === '@'
    ? require(path.join(__dirname, '../app', moduleName.slice(2)))
    : require(moduleName)
}
global._config = (name = '') => {
  const config = require(path.join(__dirname, '../config'))[process.env.NODE_ENV === 'production' ? 'prod' : 'dev']
  return name === '' ? config : config[name]
}
global.isDev = global._isDev = () => process.env.NODE_ENV === 'development'

const http = require('http')
const morgan = require('morgan')
const app = require('../app')

const port = normalizePort(process.env.PORT || '3000')

// request log format
const LOG_FORMAT = ':status :method :url :res[content-length] - :response-time ms'
const log = morgan(LOG_FORMAT)

// bootstrap
const server = http.createServer(app.callback())
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  console.info('Listening on ' + bind)
  console.info(`http://localhost:${process.env.PORT}`)
}
